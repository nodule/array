{
  "name": "array",
  "description": "Array nodes for ChiÏ‡",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/array.git"
  },
  "dependencies": {
    "chix-group": "github:psichi/chix-group",
    "lodash": "^4.15.0",
    "objeq": "^0.6.1"
  },
  "nodes": [
    {
      "name": "create",
      "ns": "array",
      "description": "Creates an array.",
      "phrases": {
        "active": "Creating array"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Array",
            "type": "array"
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "array"
          }
        }
      },
      "fn": "output.out = $.write('in', $.in.slice())\n"
    },
    {
      "name": "fill",
      "ns": "array",
      "async": true,
      "description": "Fills an array to the length specified and outputs it.",
      "phrases": {
        "active": "Filling array"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Value",
            "type": "any",
            "async": true
          },
          "length": {
            "title": "Length",
            "type": "number"
          },
          "array": {
            "title": "Array",
            "type": "array",
            "default": null
          }
        },
        "output": {
          "out": {
            "title": "Array",
            "type": "array"
          },
          "length": {
            "title": "New Length",
            "type": "number"
          }
        }
      },
      "fn": "on.input.in = function() {\n  if(!state.arr) state.arr = $.array || [];\n  state.arr.push($.in);\n  if(state.arr.length === $.length) {\n    output({ out: $.create(state.arr) });\n    state.arr = $.array || [];\n  }\n};\n"
    },
    {
      "name": "filter",
      "ns": "array",
      "async": true,
      "description": "Creates a new array with all elements that pass the test implemented by the provided function.",
      "phrases": {
        "active": "Filtering array"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Value",
            "type": "array",
            "async": true
          },
          "fn": {
            "title": "Function",
            "type": "function",
            "args": [
              "val",
              "index",
              "array"
            ]
          }
        },
        "output": {
          "out": {
            "title": "Output",
            "type": "array"
          }
        }
      },
      "fn": "on.input.in = function() {\n  output({\n    out: $.write('in', $.in.filter($.fn))\n  });\n};\n"
    },
    {
      "name": "find",
      "ns": "array",
      "async": true,
      "description": "Find within array",
      "phrases": {
        "active": "Finding within array"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Value",
            "type": "array",
            "async": true
          },
          "find": {
            "title": "Find",
            "type": "object"
          }
        },
        "output": {
          "match": {
            "title": "Match",
            "type": "any"
          },
          "nomatch": {
            "title": "No Match",
            "type": "array"
          }
        }
      },
      "dependencies": {
        "npm": {
          "lodash": "latest"
        }
      },
      "fn": "on.input.in = function() {\n  var out = lodash.find($.in, $.find);\n\n  if (out) {\n    output({\n      'match': $.write('in', out)\n    });\n  } else {\n    output({\n      'nomatch': $.get('in')\n    });\n  }\n};\n"
    },
    {
      "name": "group",
      "ns": "array",
      "async": true,
      "description": "Takes an array and turns it into group. Items are spit out one by one.",
      "phrases": {
        "active": "Grouping array"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Array",
            "type": "array",
            "async": true
          }
        },
        "output": {
          "out": {
            "title": "out",
            "group": "result",
            "type": "any"
          },
          "xout": {
            "title": "Xout"
          }
        }
      },
      "dependencies": {
        "npm": {
          "chix-group": "latest"
        }
      },
      "fn": "on.input.in = function () {\n  var g = chix_group.send.create()\n  output({xout: g.open()})\n\n  for(var i = 0; i < $.in.length; i++) {\n    output({out: $.create($.in[i])})\n  }\n\n  output({xout: g.close()});\n};\n"
    },
    {
      "name": "isEmpty",
      "ns": "array",
      "async": true,
      "description": "Checks whether the array is empty.",
      "phrases": {
        "active": "Determining whether the array is empty"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Array",
            "type": "array",
            "async": true
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "array"
          },
          "no": {
            "title": "No",
            "type": "array"
          }
        }
      },
      "fn": "on.input.in = function() {\n  if($.in.length > 0) {\n    output( { yes: $.get('in') } );\n  } else {\n    output( { no: $.get('in') } );\n  }\n};\n"
    },
    {
      "description": "Joins all elements of an array into a string.",
      "name": "join",
      "ns": "array",
      "phrases": {
        "active": "Joining array"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Array",
            "type": "array"
          },
          "seperator": {
            "title": "Seperator",
            "type": "string",
            "default": ","
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "string"
          }
        }
      },
      "fn": "output.out = $.write('in', $.in.join($.seperator))\n"
    },
    {
      "name": "length",
      "ns": "array",
      "async": true,
      "description": "Outputs the length of an array.",
      "phrases": {
        "active": "Determining length"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Array",
            "type": "array",
            "async": true
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "array"
          }
        }
      },
      "fn": "on.input.in = function() {\n  output( { out: $.write('in', $.in.length) } );\n};\n"
    },
    {
      "name": "map",
      "ns": "array",
      "async": true,
      "description": "Creates new array output with the results of calling the provided function on every element in this array",
      "phrases": {
        "active": "Mapping array"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Value",
            "type": "array",
            "async": true
          },
          "fn": {
            "title": "Function",
            "type": "function",
            "args": [
              "val",
              "index",
              "array"
            ]
          }
        },
        "output": {
          "out": {
            "title": "Output",
            "type": "array"
          }
        }
      },
      "fn": "on.input.in = function() {\n  output({\n    out: $.write('in', $.in.map($.fn))\n  });\n};\n"
    },
    {
      "name": "objeq",
      "ns": "array",
      "description": "objeq allows POJSO's (Plain-Old JavaScript Objects) to be queried in real-time.",
      "async": true,
      "phrases": {
        "active": "Querying object"
      },
      "dependencies": {
        "npm": {
          "objeq": "latest"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "Array",
            "type": "array",
            "asyn": true
          },
          "query": {
            "title": "Query",
            "description": "See [Language Reference](https://github.com/agilosoftware/objeq/wiki/Language-Reference) to learn about the query syntax",
            "type": "string"
          }
        },
        "output": {
          "out": {
            "title": "Output",
            "type": "array"
          },
          "error": {
            "title": "Error",
            "type": "Error"
          }
        }
      },
      "fn": "state.query = null;\nstate.q = '';\n\non.input.in = function() {\n  try {\n    if ($.query !== state.q) {\n      state.q = $.query;\n      state.query = objeq(state.q);\n    }\n    var out = state.query($.in);\n    output({out: $.write('in', out)});\n  } catch (e) {\n    output({error: $.write('in', e)});\n  }\n};\n"
    },
    {
      "name": "push",
      "ns": "array",
      "description": "Append value to an array.",
      "phrases": {
        "active": "Creating array"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Array",
            "type": "array"
          },
          "value": {
            "title": "Value",
            "type": "any"
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "array"
          },
          "length": {
            "title": "New Length",
            "type": "number"
          }
        }
      },
      "fn": "output.length = $.create($.in.push($.value));\noutput.out    = $.get('in');\n"
    },
    {
      "name": "sort",
      "ns": "array",
      "async": true,
      "description": "The sort() method sorts the elements of an array in place and returns the array. The sort is not necessarily stable. The default sort order is according to string Unicode code points.",
      "phrases": {
        "active": "Sorting array"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Value",
            "type": "array",
            "async": true
          },
          "fn": {
            "title": "Function",
            "type": "function",
            "required": false,
            "args": [
              "a",
              "b"
            ]
          }
        },
        "output": {
          "out": {
            "title": "Output",
            "type": "array"
          }
        }
      },
      "fn": "on.input.in = function() {\n  output({\n    out: $.write('in', $.in.sort($.fn))\n  });\n};\n"
    }
  ]
}